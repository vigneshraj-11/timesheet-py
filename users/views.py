from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from .models import CustomUser, Client, Project, SubActivity, Activity, TimeSheetDetails
from .serializers import *
from .utils import check_password, convert_str_to_time, send_email_via_outlook, convert_time_str
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.authentication import JWTAuthentication
from django.core.exceptions import ValidationError
import pandas as pd
from rest_framework import viewsets
from pytz import timezone 
import os
from datetime import datetime
from django.shortcuts import get_object_or_404
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.tokens import RefreshToken


# ####---------------------------------------------------------home-------------------------------------------------------------####
# class Home(APIView):
#     authentication_classes = [JWTAuthentication]
#     permission_classes = [IsAuthenticated]

#     def get(self, request):
#         content = {'message': 'Hello, World!'}
#         return Response(content)
    
    
####---------------------------------------------------------create user-------------------------------------------------------------####
class CreateUserView(APIView):
    authentication_classes = []  # Disable authentication
    permission_classes = [AllowAny]  # Disable authentication for this API
    
    
    def post(self, request, *args, **kwargs):
        data = request.data.copy()

        # Autogenerate a password
        password = f"{data['first_name']}@123"
        data['password'] = password
        
        serializer = CreateUserSerializer(data=data)
        if serializer.is_valid():
            try:
                user = CustomUser(
                        email=serializer.validated_data['email'],
                        first_name=serializer.validated_data['first_name'],
                        last_name=serializer.validated_data['last_name'],
                        shift=serializer.validated_data['shift'],
                        location=serializer.validated_data['location'],
                        office_location=serializer.validated_data['office_location'],
                        frm=serializer.validated_data['frm']
            
                        )
                user.set_password(f"{user.first_name.capitalize()}@123")
                user.save()
                
                # Generate JWT tokens
                # serializer = CustomTokenObtainPairSerializer(data={'username': 'admin1', 'password': 'tm@123'})
                # serializer.is_valid(raise_exception=True)
                # tokens = serializer.validated_data
                
                subject = 'Your New Account Information'
                message = f'Hello {user.first_name},\n\nYour account has been created successfully.\n\nUsername: {user.email}\nPassword: {password}\n\nPlease change your password after logging in.'
                recipient = user.email
                
                if send_email_via_outlook(subject=subject, body=message, to_email=recipient):
                    print("Email sent successfully!")
            except Exception as exception:
                print(exception.args)
                return Response(exception.args, status=status.HTTP_400_BAD_REQUEST)

            # Returning the autogenerated password in the response for demonstration purposes.
            # In a real application, you would send this password to the user securely, e.g., via email.
            return Response({'user': serializer.data, 'password': password}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


####-----------------------------------------------------------------change password---------------------------------------------------------####
class ChangePasswordView(APIView):
    def post(self, request):
        serializer = ChangePasswordSerializer(data=request.data)
        if serializer.is_valid():
            if check_password(serializer.validated_data['new_password']):
                try:
                    user = CustomUser.objects.get(email=serializer.validated_data['email'])
                    user.set_password(serializer.validated_data['new_password'])
                    user.save()
                    return Response({'status': 'Password changed successfully'}, status=status.HTTP_200_OK)
                except CustomUser.DoesNotExist:
                    return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
            else:
                return Response({'password_length': 'less than 6 charecters!'}, status=status.HTTP_404_NOT_FOUND)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
            
    
####------------------------------------------------------forgot password-----------------------------------------------------------------####
class ForgotPasswordView(APIView):
    def post(self, request):
        serializer = ForgotPasswordSerializer(data=request.data)
        if serializer.is_valid():
            if check_password(serializer.validated_data['new_password']):
                try:
                    user = CustomUser.objects.get(email=serializer.validated_data['email'])
                    if user.check_password(serializer.validated_data['old_password']):
                        user.password = serializer.validated_data['new_password']
                        user.save()
                        return Response({'status': 'Password changed successfully'}, status=status.HTTP_200_OK)
                    return Response({'status': 'Password not changed'}, status=status.HTTP_404_NOT_FOUND)
                except CustomUser.DoesNotExist:
                    return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
            else:
                return Response({'password_length': 'less than 6 charecters!'}, status=status.HTTP_404_NOT_FOUND)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    
####------------------------------------------------------get all user------------------------------------------------------####
class ListUsersView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        try:
            users = CustomUser.objects.all()
            if not users:
                return Response({"message": "No users found"}, status=status.HTTP_204_NO_CONTENT)
            
            serializer = UserListSerializer(users, many=True)
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
class UsersView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        try:
            users = CustomUser.objects.all()
            if not users:
                return Response({"message": "No users found"}, status=status.HTTP_204_NO_CONTENT)
            
            serializer = UserListSerializer(users, many=True)
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class UserByEmailView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request, email, *args, **kwargs):
        try:
            user = get_object_or_404(CustomUser, email=email)
            serializer = UserListSerializer(user)
            return Response(serializer.data, status=status.HTTP_200_OK)
        
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
####------------------------------------------------------disable a user------------------------------------------------------####
class DisableUserView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = DisableUserSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data.get('email')
            try:
                user = CustomUser.objects.get(email=serializer.validated_data['email'])
                user.is_active = False
                user.save()
                return Response({"message": "User disabled successfully"}, status=status.HTTP_200_OK)
            except CustomUser.DoesNotExist:
                return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)
            except Exception as e:
                return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

####------------------------------------------------------bulk upload-----------------------------------------------------####    
class BulkUploadView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = BulkUploadSerializer(data=request.data)
        if serializer.is_valid():
            file = serializer.validated_data['file']
            try:
                # Read the file content into a DataFrame
                if file.endswith('.csv'):
                    df = pd.read_csv(file)
                elif file.endswith('.xlsx'):
                    df = pd.read_excel(file)
                else:
                    return Response({"error": "Unsupported file type"}, status=status.HTTP_400_BAD_REQUEST)
                
                # Iterate through the DataFrame and create users
                for _, row in df.iterrows():
                    email = row.get('email')
                    first_name = row.get('first_name')
                    last_name = row.get('last_name')
                    password = f"{row.get('first_name')}@123"

                    if not email or not first_name or not last_name:
                        continue  # Skip rows with missing required fields

                    if not CustomUser.objects.filter(email=email).exists():
                        user = CustomUser(email=email, first_name=first_name, last_name=last_name)
                        user.set_password(password)
                        user.save()

                return Response({"message": "Users uploaded successfully"}, status=status.HTTP_201_CREATED)
            except ValidationError as e:
                return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
            except Exception as e:
                return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


####------------------------------------------------------CRUD for Client&Project details-----------------------------------------------------####    
class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.filter(is_active=True)
    serializer_class = ClientSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)


class ProjectViewSet(viewsets.ModelViewSet):
    queryset = Project.objects.filter(is_active=True)
    serializer_class = ProjectSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)


####------------------------------------------------------CRUD for Activity&SubActivity details-----------------------------------------------------####    
class ActivityViewSet(viewsets.ModelViewSet):
    queryset = Activity.objects.filter(is_active=True)
    serializer_class = ActivitySerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)


class SubActivityViewSet(viewsets.ModelViewSet):
    queryset = SubActivity.objects.filter(is_active=True)
    serializer_class = SubActivitySerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)


####------------------------------------------------------CRUD for Role-----------------------------------------------------####
class RoleViewSet(viewsets.ModelViewSet):
    queryset = Role.objects.filter(is_active=True)
    serializer_class = RoleSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)
    
    
####------------------------------------------------------CRUD for Department-----------------------------------------------------####
class DepartmentViewSet(viewsets.ModelViewSet):
    queryset = Department.objects.filter(is_active=True)
    serializer_class = DepartmentSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)
    
    
####------------------------------------------------------CRUD for Shift-----------------------------------------------------####
class ShiftViewSet(viewsets.ModelViewSet):
    queryset = Shift.objects.filter(is_active=True)
    serializer_class = ShiftSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)
    
    
####------------------------------------------------------CRUD for Location-----------------------------------------------------####
class LocationViewSet(viewsets.ModelViewSet):
    queryset = Location.objects.filter(is_active=True)
    serializer_class = LocationSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)
    
    
####------------------------------------------------------CRUD for OfficeLocation-----------------------------------------------------####
class OfficeLocationViewSet(viewsets.ModelViewSet):
    queryset = OfficeLocation.objects.filter(is_active=True)
    serializer_class = OfficeLocationSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)
    
    
####------------------------------------------------------CRUD for Rule-----------------------------------------------------####
class RulesViewSet(viewsets.ModelViewSet):
    queryset = Rule.objects.filter(is_active=True)
    serializer_class = RuleLocationSerializer
    
    
    def destroy(self, request, *args, **kwargs):
        client = self.get_object()
        client.is_active = False
        client.save()
        return Response(status=status.HTTP_204_NO_CONTENT)
    

####------------------------------------------------------Add task- Timesheet API-----------------------------------------------------####
class AddTaskAPIView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    
    def post(self, request):
        serializer = AddTaskSerializer(data=request.data)
        if serializer.is_valid():
            data = serializer.validated_data
            
            # Extracting validated data
            activity_id = data.get('activity_id')
            assigned_by = data.get('assigned_by')
            employee_id = data.get('employee_id')
            client_name = data.get('client_name')
            project_id = data.get('project_id')
            comments = data.get('comments')

            # Current date and time
            current_date = datetime.now(timezone("Asia/Kolkata")).strftime('%Y-%m-%d')
            current_time = datetime.now(timezone("Asia/Kolkata")).strftime('%H:%M:%S')

            try:
                employee = CustomUser.objects.get(id=employee_id)
                if not employee:
                    return Response("User does not exist", status=status.HTTP_400_BAD_REQUEST)

                # Check if there is an existing entry with the same timesheet_id
                timesheets = TimeSheetDetails.objects.filter(
                    date=current_date,
                    employee=employee,
                    activity_name=activity_id,
                    client_name=Client.objects.get(name=client_name).id,
                    project_name=project_id,
                ).all()
                for timesheet in timesheets:
                    if timesheet and not timesheet.end_time:
                        # If entry exists, update the end_time
                        timesheet.end_time = current_time
                        timesheet.save()
                # Otherwise, create a new entry
                timesheet = TimeSheetDetails.objects.create(
                    activity_name=Activity.objects.get(id=activity_id),
                    assigned_by=assigned_by,
                    comments=comments,
                    date=current_date,
                    employee=employee,
                    start_time=current_time,
                    client_name=Client.objects.get(name=client_name),
                    project_name=Project.objects.get(id=project_id),
                    end_time=None  # Explicitly setting to None
                )

                return Response({
                    'status': 'success',
                    'timesheet_id': timesheet.timesheet_id,
                    'start_time': timesheet.start_time,
                    'end_time': timesheet.end_time,
                }, status=status.HTTP_201_CREATED)
            except Exception as exception:
                return Response(exception.args, status=status.HTTP_400_BAD_REQUEST)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


####------------------------------------------------------Missed task- Timesheet API-----------------------------------------------------####
class MissedTaskAPIView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    def post(self, request):
        serializer = MissedTaskSerializer(data=request.data)
        if serializer.is_valid():
            data = serializer.validated_data

            # Extracting validated data
            activity_id = data.get('activity_id')
            assigned_by = data.get('assigned_by')
            employee_id = data.get('employee_id')
            client_name = data.get('client_name')
            project_id = data.get('project_id')
            start_time = data.get('start_time')
            end_time = data.get('end_time')
            comments = data.get('comments')
            
            # Current date
            current_date = datetime.now(timezone("Asia/Kolkata")).strftime('%Y-%m-%d')
            current_time = datetime.now(timezone("Asia/Kolkata")).strftime('%H:%M:%S')
            try:
                # Get or create necessary instances
                activity = Activity.objects.get(id=activity_id)
                employee = CustomUser.objects.get(id=employee_id)
                client = Client.objects.get(name=client_name)
                project = Project.objects.get(id=project_id)
                
                # To find the tasks having end_time is null.
                overlapping_timesheets_end_time_none = TimeSheetDetails.objects.filter(
                    employee=employee_id,
                    date=current_date,
                    end_time=None,
                    client_name=Client.objects.get(name=client_name).id,
                    project_name=project_id,
                    activity_name=activity_id
                ).all()
                
                if overlapping_timesheets_end_time_none.exists():
                    for overlapping_timesheet_end_time_none in overlapping_timesheets_end_time_none:
                            overlapping_timesheet_end_time_none.end_time = current_time
                            overlapping_timesheet_end_time_none.save()
                        
                # Check for existing timesheet records that overlap with the provided start and end times
                overlapping_timesheets = TimeSheetDetails.objects.filter(
                    employee=employee_id,
                    date=current_date,
                    start_time__lt=end_time,
                    end_time__gt=start_time,
                    client_name=Client.objects.get(name=client_name).id,
                    project_name=project_id,
                    activity_name=activity_id
                )
                
                if overlapping_timesheets.exists():
                    for ts in overlapping_timesheets:
                        # if not ts.end_time:
                        #     ts.end_time = current_time
                        #     ts.save()
                        # Adjust the existing timesheets to not overlap
                        if convert_str_to_time(ts.start_time) < start_time and convert_str_to_time(ts.end_time) > end_time:
                            # Split the existing timesheet into two
                            TimeSheetDetails.objects.create(
                                activity_name=ts.activity_name,
                                assigned_by=ts.assigned_by,
                                comments=ts.comments,
                                date=ts.date,
                                employee=ts.employee,
                                start_time=ts.start_time,
                                end_time=start_time,
                                project_name=ts.project_name,
                                client_name=client,
                            )
                            ts.start_time = end_time
                            ts.save()
                        elif convert_str_to_time(ts.start_time) < start_time < convert_str_to_time(ts.end_time):
                            # Adjust the end time of the existing record
                            ts.end_time = start_time
                            ts.save()
                        elif convert_str_to_time(ts.start_time) < end_time < convert_str_to_time(ts.end_time):
                            # Adjust the start time of the existing record
                            ts.start_time = end_time
                            ts.save()
                        else:
                            # Completely overlapping timesheet, delete or adjust as needed
                            ts.delete()
                            
                # Now create the new timesheet entry
                new_timesheet = TimeSheetDetails.objects.create(
                    activity_name=activity,
                    assigned_by=assigned_by,
                    date=current_date,
                    employee=employee,
                    start_time=start_time,
                    comments=comments,
                    end_time=end_time,
                    client_name=client,
                    project_name=project
                )

                return Response({
                    'status': 'success',
                    'timesheet_id': new_timesheet.timesheet_id,
                    'start_time': new_timesheet.start_time,
                    'end_time': new_timesheet.end_time,
                }, status=status.HTTP_201_CREATED)
            except Exception as exception:
                Response(exception.args, status=status.HTTP_400_BAD_REQUEST)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

####------------------------------------------------------Get employee timesheet records- Timesheet API-----------------------------------------------------####
class EmployeeRecordsView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    def post(self, request):
        # Deserialize the input data
        serializer = EmployeeRecordSerializer(data=request.data)
        if serializer.is_valid():
            employee_id = serializer.validated_data['employee_id']
            
            # Use the Asia/Kolkata timezone
            current_date = datetime.now(timezone("Asia/Kolkata")).strftime('%Y-%m-%d')
            start_of_month = datetime.now(timezone("Asia/Kolkata")).replace(day=1).strftime('%Y-%m-%d')
            
            # Query the records for the given employee_id from the start of the month to today
            records = TimeSheetDetails.objects.filter(
                employee_id=employee_id,
                date__range=[start_of_month, current_date]
            )
            
            # Serialize the records
            records_serializer = TimeSheetDetailsSerializer(records, many=True)
            return Response(records_serializer.data, status=status.HTTP_200_OK)
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



####------------------------------------------------------Email to FRM- Timesheet API-----------------------------------------------------####
# class EmailTimeSheetsAPIView(APIView):
#     authentication_classes = [JWTAuthentication]
#     permission_classes = [IsAuthenticated]
    
#     current_date = datetime.now(timezone("Asia/Kolkata")).strftime('%Y-%m-%d')
#     current_time = datetime.now(timezone("Asia/Kolkata")).strftime('%H:%M:%S')
#     def post(self, request):
#         serializer = EmailTimeSheetsSerializer(data=request.data)
        
#         if serializer.is_valid():
#             data = serializer.validated_data
#             employee = data.get("employee", None)
#             frm = data.get("frm", None)
#             management = data.get("management", None)
            
#             if employee:
#                 employees = CustomUser.objects.all()
#                 for emp in employees:
#                     records = TimeSheetDetails.objects.filter(employee=emp.id, date=self.current_date)
#                     if records.exists():
#                         file_path = f"./files/emps/{emp.first_name}_daily_report_{self.current_date}.xlsx"
#                         file_path = self.create_excel_file(path=file_path, records=records)
                            
#                         # file_path = self.create_excel(records, emp.first_name)
#                         subject = f"Daily report of Emp: {emp.first_name} {emp.last_name}--{emp.id}"
#                         message = f"Hello {emp.first_name},\n\nPlease find the attached file with today's task report.\n\nThanks."
#                         if send_email_via_outlook(subject=subject, body=message, to_email="mtsmech04@gmail.com", attachments=[file_path]):
#                             print(f"Email sent successfully to {emp.first_name} {emp.last_name}--{emp.id}")
#                         else:
#                             print(f"Email not sent to {emp.first_name} {emp.last_name}--{emp.id}")
#                     else:
#                         print(f"Records doesn't exist for {emp.first_name} {emp.last_name}--{emp.id}")
                
#             if frm:
#                 frms = FRM.objects.all()
#                 for frm in frms:
#                     email_attachment_path_list = []
#                     data = {
#                         "Employee Name":[],
#                         "Start Time": [],
#                         "End Time": [],
#                         "Break Hours": [],
#                         "Total Hours": []
#                     }
#                     emps = CustomUser.objects.filter(frm=frm.id)
#                     for emp in emps:
#                         records = TimeSheetDetails.objects.filter(employee=emp.id, date=self.current_date)
                        
#                         if records.exists():
#                             time_format = "%H:%M:%S"
#                             start_time = datetime.strptime(min([record.start_time for record in records]), time_format)
#                             end_time = datetime.strptime(max([record.end_time if record.end_time else self.current_time for record in records]), time_format)
#                             working_hours = end_time - start_time
#                             break_hours = '------'
#                             break_records = TimeSheetDetails.objects.filter(
#                                                 employee=emp.id,
#                                                 date=self.current_date, activity_name__name="Tea Break"
#                                             ).filter(activity_name__name='Lunch Break')
#                             if break_records.exists():
#                                 start_time = datetime.strptime(min([record.start_time for record in break_records]), time_format)
#                                 end_time = datetime.strptime(max([record.end_time if record.end_time else self.current_time for record in records]), time_format)
#                                 break_hours = end_time - start_time
#                                 working_hours = working_hours - break_hours
#                             working_hours = convert_time_str(working_hours)
#                             data['Employee Name'].append(f'{emp.first_name} {emp.last_name}')
#                             data['Start Time'].append(start_time.time().strftime("%H:%M:%S"))
#                             data['End Time'].append(end_time.time().strftime("%H:%M:%S"))
#                             data['Break Hours'].append(break_hours)
#                             data['Total Hours'].append(working_hours)
#                             file_path = f"./files/frm/{emp.first_name}_daily_report_{self.current_date}.xlsx"
#                             file_path = self.create_excel_file(records=records, path=file_path)
                            
#                             email_attachment_path_list.append(file_path)
#                         else:
#                             print(f"No records founf for {emp.first_name} {emp.last_name}--{emp.id} => FRM {frm.name}")
#                     file_path = f"./files/frm/{frm.name}_daily_report_{self.current_date}.xlsx"
#                     file_path = self.create_excel_file(data=data, path=file_path)
#                     email_attachment_path_list.append(file_path)
#                     subject = f"Daily report of Employee"
#                     message = f"Hello {frm.name},\n\nPlease find the attached files with today's task report of employees.\n\nThanks."
#                     if send_email_via_outlook(subject=subject, body=message, to_email=frm.email, attachments=email_attachment_path_list):
#                         print(f"Email sent successfully to {frm.name} -- {frm.id}")
#                     else:
#                         print(f"Email not sent to {frm.name} -- {frm.id}")
                        
#             if management:
#                 pass
                            
#             return Response({"Message":f'Email was sent successfully'
#                 }, status=status.HTTP_201_CREATED)
                
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
 
class EmailTimeSheetsAPIView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    current_date = datetime.now(timezone("Asia/Kolkata")).strftime('%Y-%m-%d')
    current_time = datetime.now(timezone("Asia/Kolkata")).strftime('%H:%M:%S')

    def post(self, request):
        serializer = EmailTimeSheetsSerializer(data=request.data)
        if serializer.is_valid():
            data = serializer.validated_data
            employee = data.get("employee", None)
            frm = data.get("frm", None)
            management = data.get("management", None)
            
            if employee:
                employees = CustomUser.objects.all()

                for emp in employees:
                    records = TimeSheetDetails.objects.filter(employee=emp.id, date=self.current_date)

                    if records.exists():
                        file_path = f"./files/emps/{emp.first_name}_daily_report_{self.current_date}.xlsx"

                        with pd.ExcelWriter(file_path) as writer:
                            df1 = self.create_excel_file(path=file_path, records=records)
                            df1.to_excel(writer, sheet_name=emp.first_name, index=False)
                            
                        subject = f"Daily report of Emp: {emp.first_name} {emp.last_name}--{emp.id}"
                        message = f"Hello {emp.first_name},\n\nPlease find the attached file with today's task report.\n\nThanks."

                        if send_email_via_outlook(subject=subject, body=message, to_email="mtsmech04@gmail.com", attachments=[file_path]):
                            print(f"Email sent successfully to {emp.first_name} {emp.last_name}--{emp.id}")
                        else:
                            print(f"Email not sent to {emp.first_name} {emp.last_name}--{emp.id}")

                    else:
                        print(f"Records doesn't exist for {emp.first_name} {emp.last_name}--{emp.id}")

            if frm:
                frms = FRM.objects.all()
                
                for frm in frms:
                    email_attachment_path_list = []
                    data = {
                        "Employee Name":[],
                        "Start Time": [],
                        "End Time": [],
                        "Break Hours": [],
                        "Total Hours": []
                    }
                    emps = CustomUser.objects.filter(frm=frm.id)
                    file_path = f"./files/frm/{frm.name}_daily_report_{self.current_date}.xlsx"
                    
                    with pd.ExcelWriter(file_path) as writer:

                        for emp in emps:
                            records = TimeSheetDetails.objects.filter(employee=emp.id, date=self.current_date)

                            if records.exists():
                                time_format = "%H:%M:%S"
                                start_time = datetime.strptime(min([record.start_time for record in records]), time_format)
                                end_time = datetime.strptime(max([record.end_time if record.end_time else self.current_time for record in records]), time_format)
                                working_hours = end_time - start_time
                                break_hours = '------'
                                break_records = TimeSheetDetails.objects.filter(
                                                    employee=emp.id,
                                                    date=self.current_date, activity_name__name="Tea Break"
                                                ).filter(activity_name__name='Lunch Break')

                                if break_records.exists():
                                    start_time = datetime.strptime(min([record.start_time for record in break_records]), time_format)
                                    end_time = datetime.strptime(max([record.end_time if record.end_time else self.current_time for record in records]), time_format)
                                    break_hours = end_time - start_time
                                    working_hours = working_hours - break_hours
                                working_hours = convert_time_str(working_hours)
                                data['Employee Name'].append(f'{emp.first_name} {emp.last_name}')
                                data['Start Time'].append(start_time.time().strftime("%H:%M:%S"))
                                data['End Time'].append(end_time.time().strftime("%H:%M:%S"))
                                data['Break Hours'].append(break_hours)
                                data['Total Hours'].append(working_hours)
                                df1 = self.create_excel_file(records=records, path=file_path)
                                df1.to_excel(writer, sheet_name=emp.first_name, index=False)

                            else:
                                print(f"No records founf for {emp.first_name} {emp.last_name}--{emp.id} => FRM {frm.name}")

                        df1 = self.create_excel_file(data=data, path=file_path)
                        df1.to_excel(writer, sheet_name="Summary", index=False)
                        email_attachment_path_list.append(file_path)
                        subject = f"Daily report of Employee"
                        message = f"Hello {frm.name},\n\nPlease find the attached files with today's task report of employees.\n\nThanks."

                        if send_email_via_outlook(subject=subject, body=message, to_email=frm.email, attachments=email_attachment_path_list):
                            print(f"Email sent successfully to {frm.name} -- {frm.id}")
                        else:
                            print(f"Email not sent to {frm.name} -- {frm.id}")
                            
            if management:
                pass

            return Response({"Message":f'Email was sent successfully'
                }, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) 
                            
                            
    def create_excel_file(self, path, data=None, records=None):
        if records:
            data = {
                    "Client Name": [record.client_name.name for record in records],
                    "Project Name": [record.project_name.name for record in records],
                    "Activity Name": [record.activity_name.name for record in records],
                    "Assignedby": [record.assigned_by for record in records],
                    "Start Time": [record.start_time for record in records],
                    "End Time": [record.end_time for record in records],
                    "Date": [record.date for record in records],
                    "Pause Reason": [record.pause_reason for record in records],
                    "Comments": [record.comments for record in records],
                    "EOD Status": [record.eod_status for record in records],
                    "Approval Status": [record.approval_status for record in records],
                    }
        df = pd.DataFrame(data)
        return df


class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer


class BlacklistTokenView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        try:
            refresh_token = request.data["refresh_token"]
            token = RefreshToken(refresh_token)
            token.blacklist()
            response_data = {'Message':'Logged out Successfully'}
            return Response(response_data,status=status.HTTP_205_RESET_CONTENT)
        except Exception as e:
            return Response(status=status.HTTP_400_BAD_REQUEST)
        
        
class EditTimeSheetRecordsView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    def post(self, request):
        serializer = EditTimeSheetRecordsSerializer(data=request.data)
        if serializer.is_valid():
            try:
                data = serializer.validated_data
                comments = data.get('comments')
                timesheet_id = data.get('timesheet_id')
                timesheet = TimeSheetDetails.objects.get(timesheet_id=timesheet_id)
                timesheet.comments = comments
                timesheet.save()
                
                return Response({"Message": "Updated successfully"}, status=status.HTTP_205_RESET_CONTENT)
            except Exception as e:
                return Response(status=status.HTTP_400_BAD_REQUEST)
    
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    
class ProjectsToClinetsView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    def post(self, request):
        serializer = ProjectsToClientsSerializer(data=request.data)
        if serializer.is_valid():
            try:
                data = serializer.validated_data
                client_name = data.get('client_name')
                client = Client.objects.get(name=client_name)
                projects = Project.objects.filter(client=client.id)
                data = {
                            "Message": "Successfull",
                            "data": [project.name for project in projects]
                        }
                
                return Response(data,status=status.HTTP_205_RESET_CONTENT)
                
            except Exception as e:
                return Response(status=status.HTTP_400_BAD_REQUEST)
    
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    